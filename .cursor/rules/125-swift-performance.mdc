---
description: Always measure before and after optimizations to ensure improvements are meaningful.
globs:
  - "**/*.swift"
  - "**/*.swiftui"
  - "**/*.xib"
  - "**/*.storyboard"
  - "**/*.xcassets"
  - "**/*.xcconfig"
alwaysApply: false
---

# Swift Performance Optimization Guidelines

You are optimizing Swift code for performance. Follow these guidelines to ensure optimal performance while maintaining code quality.

## Memory Management

**Value Types**: Prefer structs over classes for simple data models. Structs are copied on assignment, which can be more efficient for small data.

**Reference Types**: Use classes only when you need reference semantics or inheritance.

**ARC Optimization**:
- Avoid retain cycles with weak/unowned references
- Use `[weak self]` in closures when appropriate
- Minimize strong reference cycles

## Collection Performance

**Array Operations**:
- Use `reserveCapacity()` when you know the final size
- Prefer `map`, `filter`, `reduce` over loops for functional operations
- Use `lazy` for large collections to avoid intermediate allocations

**Dictionary Performance**:
- Use `reserveCapacity()` for known sizes
- Consider using `NSDictionary` for very large dictionaries
- Use `compactMap` to remove nil values efficiently

## SwiftUI Performance

**View Updates**:
- Use `@State` only for view-local state
- Minimize view body computations
- Use `@MainActor` for UI updates
- Leverage SwiftUI's declarative nature

**List Performance**:
- Use `LazyVStack` and `LazyHStack` for large lists
- Implement proper `Identifiable` conformance
- Use `ForEach` with stable identifiers

## Concurrency Performance

**Async/Await**:
- Use structured concurrency for better performance
- Avoid blocking the main thread
- Use `Task` for fire-and-forget operations
- Implement proper cancellation

**Actor Usage**:
- Use actors for shared mutable state
- Avoid actor isolation violations
- Use `@MainActor` for UI updates

## SwiftData Performance

**Query Optimization**:
- Use `@Query` with proper predicates
- Implement fetch request batching
- Use `NSFetchRequest` for complex queries
- Monitor Core Data performance

**Model Design**:
- Design efficient relationships
- Use appropriate fetch request strategies
- Implement proper indexing

## Profiling and Measurement

**Instruments**: Use Xcode Instruments to identify bottlenecks
**Time Profiler**: Measure CPU usage and identify hot paths
**Allocations**: Monitor memory usage and identify leaks
**Core Animation**: Profile UI performance and rendering

