---
description: Always use structured concurrency and handle errors appropriately in async contexts.
globs:
  - "*.swift"
alwaysApply: false
---

# Swift Concurrency Best Practices

You are working with Swift concurrency and async/await. Follow these patterns to create efficient, safe, and maintainable concurrent code.

## Async/Await Fundamentals

**Function Declaration**: Use `async` for asynchronous functions:
```swift
func fetchUserData(id: String) async throws -> User {
    // Implementation
}
```

**Task Creation**: Use `Task` for fire-and-forget operations:
```swift
func performBackgroundWork() {
    Task {
        do {
            let result = try await heavyOperation()
            await MainActor.run {
                // Update UI on main thread
            }
        } catch {
            // Handle error
        }
    }
}
```

**MainActor Usage**: Use `@MainActor` for UI updates:
```swift
@MainActor
class UserViewModel: ObservableObject {
    @Published var user: User?
    @Published var isLoading = false

    func fetchUser() async {
        isLoading = true
        defer { isLoading = false }

        do {
            user = try await userService.fetchUser()
        } catch {
            // Handle error
        }
    }
}
```

## Structured Concurrency

**Task Groups**: Use task groups for parallel operations:
```swift
func fetchUserData(userId: String) async throws -> UserData {
    async let user = userService.fetchUser(id: userId)
    async let profile = profileService.fetchProfile(id: userId)
    async let settings = settingsService.fetchSettings(id: userId)

    return try await UserData(
        user: user,
        profile: profile,
        settings: settings
    )
}
```

**Cancellation**: Implement proper cancellation:
```swift
func fetchDataWithTimeout() async throws -> Data {
    try await withTaskCancellationHandler {
        try await withTimeout(seconds: 30) {
            try await dataService.fetchData()
        }
    } onCancel: {
        // Cleanup code
    }
}
```

## Actor Usage

**Actor Definition**: Use actors for shared mutable state:
```swift
actor UserCache {
    private var cache: [String: User] = [:]

    func getUser(id: String) -> User? {
        cache[id]
    }

    func setUser(_ user: User, for id: String) {
        cache[id] = user
    }

    func clearCache() {
        cache.removeAll()
    }
}
```

**Actor Isolation**: Respect actor isolation:
```swift
actor DataManager {
    private var data: [String: Any] = [:]

    func updateData(_ newData: [String: Any]) {
        // This is safe - we're inside the actor
        data = newData
    }

    func getData() -> [String: Any] {
        // This is safe - we're inside the actor
        return data
    }
}

// Usage
let manager = DataManager()
await manager.updateData(["key": "value"])
let data = await manager.getData()
```

## SwiftUI Concurrency

**View Updates**: Use `@MainActor` for view updates:
```swift
struct ContentView: View {
    @StateObject private var viewModel = UserViewModel()

    var body: some View {
        VStack {
            if viewModel.isLoading {
                ProgressView()
            } else if let user = viewModel.user {
                UserView(user: user)
            }
        }
        .task {
            await viewModel.fetchUser()
        }
    }
}
```

**Async Image Loading**: Handle async image loading:
```swift
struct AsyncImageView: View {
    let url: URL
    @State private var image: UIImage?
    @State private var isLoading = true

    var body: some View {
        Group {
            if let image = image {
                Image(uiImage: image)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
            } else if isLoading {
                ProgressView()
            } else {
                Image(systemName: "photo")
                    .foregroundColor(.gray)
            }
        }
        .task {
            await loadImage()
        }
    }

    @MainActor
    private func loadImage() async {
        isLoading = true
        defer { isLoading = false }

        do {
            let (data, _) = try await URLSession.shared.data(from: url)
            image = UIImage(data: data)
        } catch {
            // Handle error
        }
    }
}
```

## Error Handling in Concurrency

**Async Error Propagation**: Handle errors in async contexts:
```swift
enum NetworkError: Error {
    case invalidURL
    case noData
    case decodingError
}

func fetchData() async throws -> Data {
    guard let url = URL(string: "https://api.example.com/data") else {
        throw NetworkError.invalidURL
    }

    let (data, response) = try await URLSession.shared.data(from: url)

    guard let httpResponse = response as? HTTPURLResponse,
          httpResponse.statusCode == 200 else {
        throw NetworkError.noData
    }

    return data
}
```

**Error Recovery**: Implement error recovery strategies:
```swift
func fetchDataWithRetry() async throws -> Data {
    var lastError: Error?

    for attempt in 1...3 {
        do {
            return try await fetchData()
        } catch {
            lastError = error
            if attempt < 3 {
                try await Task.sleep(nanoseconds: UInt64(pow(2.0, Double(attempt))) * 1_000_000_000)
            }
        }
    }

    throw lastError ?? NetworkError.noData
}
```

## Performance Optimization

**Task Priority**: Use appropriate task priorities:
```swift
func performHighPriorityWork() async {
    await Task(priority: .high) {
        // High priority work
    }.value
}

func performBackgroundWork() async {
    await Task(priority: .background) {
        // Background work
    }.value
}
```

**Task Cancellation**: Implement proper cancellation:
```swift
class DataLoader: ObservableObject {
    private var currentTask: Task<Void, Never>?

    func loadData() {
        // Cancel previous task
        currentTask?.cancel()

        currentTask = Task {
            do {
                let data = try await fetchData()
                await MainActor.run {
                    // Update UI
                }
            } catch {
                await MainActor.run {
                    // Handle error
                }
            }
        }
    }

    deinit {
        currentTask?.cancel()
    }
}
```

## Testing Async Code

**Async Testing**: Test async functions properly:
```swift
func test_fetchUserData_returnsValidUser() async throws {
    // Given
    let userId = "123"

    // When
    let user = try await userService.fetchUser(id: userId)

    // Then
    XCTAssertEqual(user.id, userId)
    XCTAssertNotNil(user.name)
}
```

**Mocking Async Functions**: Create async mocks:
```swift
protocol UserServiceProtocol {
    func fetchUser(id: String) async throws -> User
}

class MockUserService: UserServiceProtocol {
    func fetchUser(id: String) async throws -> User {
        // Simulate network delay
        try await Task.sleep(nanoseconds: 100_000_000)
        return User(id: id, name: "Test User")
    }
}
```

