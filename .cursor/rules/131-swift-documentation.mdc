---
description: Always write documentation that is clear, comprehensive, and maintainable.
globs:
  - "*.swift"
alwaysApply: true
---

# Swift Documentation Best Practices

You are documenting Swift code and APIs. Follow these patterns to create comprehensive, maintainable documentation.

## API Documentation

**Function Documentation**: Document all public functions with clear descriptions:
```swift
/// Fetches user data from the server asynchronously.
///
/// This function performs a network request to retrieve user information
/// based on the provided user ID. The request is made over HTTPS and
/// includes proper error handling for network failures.
///
/// - Parameters:
///   - id: The unique identifier of the user to fetch
///   - includeProfile: Whether to include the user's profile information
///
/// - Returns: A `User` object containing the user's information
///
/// - Throws: `NetworkError.invalidResponse` if the server returns an error,
///           `NetworkError.noConnection` if the network is unavailable
///
/// - Note: This function requires an active internet connection
///
/// - Example:
/// ```swift
/// let user = try await userService.fetchUser(id: "123", includeProfile: true)
/// print("User name: \(user.name)")
/// ```
func fetchUser(id: String, includeProfile: Bool = false) async throws -> User {
    // Implementation
}
```

**Property Documentation**: Document public properties:
```swift
/// The current user's authentication token.
///
/// This property contains the JWT token used for API authentication.
/// The token is automatically refreshed when it expires.
///
/// - Note: This property is thread-safe and can be accessed from any queue.
/// - Warning: Do not store this token in UserDefaults or other insecure storage.
var authToken: String? {
    get { /* implementation */ }
    set { /* implementation */ }
}
```

**Type Documentation**: Document classes, structs, and enums:
```swift
/// Represents a user in the application.
///
/// This struct contains all the essential information about a user,
/// including their profile data and preferences. Instances of this
/// type are immutable and thread-safe.
///
/// - Note: User objects are created by the `UserService` and should
///         not be instantiated directly.
///
/// - SeeAlso: `UserService`, `UserProfile`
struct User: Identifiable, Codable {
    /// The unique identifier for this user.
    let id: String

    /// The user's display name.
    let name: String

    /// The user's email address.
    let email: String

    /// The date when this user account was created.
    let createdAt: Date
}
```

## Code Comments

**Implementation Comments**: Add comments for complex logic:
```swift
func calculateDistance(from start: Location, to end: Location) -> Double {
    // Use Haversine formula for accurate distance calculation
    let earthRadius = 6371.0 // Earth's radius in kilometers

    let lat1 = start.latitude * .pi / 180
    let lat2 = end.latitude * .pi / 180
    let deltaLat = (end.latitude - start.latitude) * .pi / 180
    let deltaLon = (end.longitude - start.longitude) * .pi / 180

    let a = sin(deltaLat / 2) * sin(deltaLat / 2) +
             cos(lat1) * cos(lat2) *
             sin(deltaLon / 2) * sin(deltaLon / 2)

    let c = 2 * atan2(sqrt(a), sqrt(1 - a))

    return earthRadius * c
}
```

**TODO Comments**: Use structured TODO comments:
```swift
// TODO: Implement caching for better performance
// FIXME: This method doesn't handle edge cases properly
// NOTE: This is a temporary solution until the new API is ready
func fetchData() async throws -> Data {
    // Implementation
}
```

## SwiftUI Documentation

**View Documentation**: Document SwiftUI views:
```swift
/// A view that displays a list of user runs with detailed information.
///
/// This view presents a scrollable list of run entries, each showing
/// the distance, duration, and date of the run. Users can tap on any
/// run to view more details.
///
/// - Parameters:
///   - runs: An array of run data to display
///   - onRunSelected: A closure called when a run is tapped
///
/// - Note: This view automatically handles empty states and loading states.
///
/// - Example:
/// ```swift
/// RunListView(runs: userRuns) { run in
///     // Navigate to run detail view
/// }
/// ```
struct RunListView: View {
    let runs: [Run]
    let onRunSelected: (Run) -> Void

    var body: some View {
        // Implementation
    }
}
```

**Modifier Documentation**: Document custom view modifiers:
```swift
/// A view modifier that adds a card-like appearance to any view.
///
/// This modifier applies a background color, corner radius, and shadow
/// to create a card-like visual effect. It's commonly used for content
/// containers and interactive elements.
///
/// - Parameters:
///   - backgroundColor: The background color of the card
///   - cornerRadius: The radius of the card's corners
///   - shadowRadius: The radius of the shadow effect
///
/// - Returns: A modified view with card styling
///
/// - Example:
/// ```swift
/// Text("Hello, World!")
///     .cardStyle(backgroundColor: .white, cornerRadius: 12)
/// ```
struct CardStyle: ViewModifier {
    let backgroundColor: Color
    let cornerRadius: CGFloat
    let shadowRadius: CGFloat

    func body(content: Content) -> some View {
        content
            .padding()
            .background(backgroundColor)
            .cornerRadius(cornerRadius)
            .shadow(radius: shadowRadius)
    }
}
```

## Architecture Documentation

**Protocol Documentation**: Document protocols and their requirements:
```swift
/// A protocol defining the requirements for user data services.
///
/// This protocol provides a common interface for user-related operations,
/// allowing for easy testing and dependency injection. Implementations
/// should handle authentication, caching, and error management.
///
/// - Note: All methods in this protocol are asynchronous and may throw errors.
/// - SeeAlso: `UserService`, `MockUserService`
protocol UserServiceProtocol {
    /// Fetches a user by their unique identifier.
    ///
    /// - Parameter id: The unique identifier of the user
    /// - Returns: The user data if found
    /// - Throws: `UserError.notFound` if the user doesn't exist
    func fetchUser(id: String) async throws -> User

    /// Updates a user's information.
    ///
    /// - Parameter user: The updated user data
    /// - Throws: `UserError.invalidData` if the user data is invalid
    func updateUser(_ user: User) async throws

    /// Deletes a user account.
    ///
    /// - Parameter id: The unique identifier of the user to delete
    /// - Throws: `UserError.notFound` if the user doesn't exist
    func deleteUser(id: String) async throws
}
```

**Error Documentation**: Document custom error types:
```swift
/// Errors that can occur during user-related operations.
///
/// This enum defines all possible errors that can be thrown by user
/// service implementations. Each case includes a descriptive message
/// to help with debugging and user feedback.
enum UserError: Error, LocalizedError {
    /// The requested user was not found in the system.
    case notFound

    /// The provided user data is invalid or incomplete.
    case invalidData

    /// The user's authentication token has expired.
    case tokenExpired

    /// A network error occurred while processing the request.
    case networkError(Error)

    var errorDescription: String? {
        switch self {
        case .notFound:
            return "The requested user was not found"
        case .invalidData:
            return "The provided user data is invalid"
        case .tokenExpired:
            return "The authentication token has expired"
        case .networkError(let error):
            return "Network error: \(error.localizedDescription)"
        }
    }
}
```

## README Documentation

**Project README**: Create comprehensive project documentation:
```markdown
# Stride - iOS Running App

A minimalist, modern iOS app for casual runners to log their daily runs and track their progress over time.

## Features

- **Run Logging**: Log runs with distance, duration, and date
- **Run History**: View chronologically sorted list of past runs
- **Run Details**: Detailed view for individual run entries
- **SwiftData Integration**: Local data persistence using SwiftData
- **Modern SwiftUI**: Built with iOS 17+ and latest SwiftUI features

## Requirements

- iOS 17.0+
- Xcode 15.0+
- Swift 5.9+

## Installation

1. Clone the repository
2. Open `Stride.xcodeproj` in Xcode
3. Build and run the project

## Architecture

The app follows the MVVM architecture pattern:

- **Models**: SwiftData `@Model` classes for data persistence
- **Views**: SwiftUI views for UI presentation
- **ViewModels**: Observable classes for business logic

## Development

### Cursor Rules

This project uses advanced Cursor rules for AI-assisted development:

- **Swift Core Principles**: Modern Swift and SwiftUI best practices
- **TDD Workflow**: Test-driven development with XCTest
- **Performance Optimization**: Swift performance best practices
- **Error Handling**: Comprehensive error handling patterns
- **Design System**: Consistent UI component patterns
- **SwiftData Patterns**: Data persistence best practices

### Testing

Run tests using:

```bash
xcodebuild test -scheme Stride -destination 'platform=iOS Simulator,name=iPhone 16 Pro'
```

## Contributing

1. Follow the established coding standards
2. Write tests for new features
3. Update documentation as needed
4. Use the provided Cursor rules for consistency

## License

MIT License - see LICENSE file for details
```

