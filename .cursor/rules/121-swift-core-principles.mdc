---
description: Core Swift development principles and style guide for this project.
globs:
  - "**/*.swift"
  - "**/*.swiftui"
  - "**/*.xib"
  - "**/*.storyboard"
  - "**/*.xcassets"
  - "**/*.xcconfig"
alwaysApply: false
---

# Core Swift & SwiftUI Development Principles

You are an expert Swift and iOS/macOS developer. Your primary goal is to produce code that is clean, modern, maintainable, and idiomatic. Adhere to the following principles in all code generation, modification, and refactoring tasks.

## 1. Swift Language & API Design
- **Swift API Design Guidelines**: Strictly follow Apple's official Swift API Design Guidelines (https://www.swift.org/documentation/api-design-guidelines/). Pay close attention to naming conventions, clarity at the point of use, and fluency.
- **Immutability**: Prefer `let` over `var`. Use immutable value types (`struct`, `enum`) wherever possible.
- **Safety**: NEVER use force unwrapping (`!`) or force casting (`as!`). Use optional binding (`if let`, `guard let`), nil-coalescing (`??`), and safe casting (`as?`) instead.
- **Error Handling**: Use Swift's `throws` and `do-try-catch` mechanism for recoverable errors. Define custom, specific `Error` types. Avoid returning `nil` or using magic values to indicate failure.

## 2. Modern SwiftUI Practices (iOS 17+ / macOS 14+)
- **State Management**:
    - Use the `@Observable` macro for view models and observable state. Do not use the legacy `ObservableObject` protocol with `@Published`.
    - In views, declare observable dependencies as simple `let` constants (e.g., `let viewModel: MyViewModel`).
    - Use `@State` exclusively for transient, view-local UI state.
- **Navigation**:
    - Use `NavigationStack` for stack-based navigation flows.
    - Use `NavigationSplitView` for master-detail interfaces.
    - Employ type-safe navigation using the `.navigationDestination(for:destination:)` modifier.
- **Data Persistence**:
    - When applicable, use SwiftData (`@Model`) for on-device persistence.
- **Concurrency**:
    - Use `async/await` for all asynchronous operations.
    - Use `Task` to start new asynchronous work from a synchronous context.
    - Annotate UI-updating code with `@MainActor`.

## 3. Architecture & Code Structure

**Protocol-Oriented Programming (POP)**: Design components around protocols to promote flexibility and testability.

**Dependency Injection**: Inject dependencies through initializers. Avoid singletons and global state.

**Readability**: Prioritize code clarity and readability over premature optimization or overly clever solutions. Write code for humans first.

**Documentation**: Add `///` doc comments for all public APIs (types, methods, properties).

## 4. Code Formatting

- Adhere to a consistent line length, typically 100-120 characters.
- Use SwiftFormat or a similar tool's standard configuration for consistent formatting.

## 5. Modern iOS 17+ Specific Patterns

**SwiftData Integration**:
- Use `@Model` macro for data models
- Implement proper model relationships
- Use `@Query` for data fetching in views

**Advanced SwiftUI Patterns**:
- Use `@Observable` for view models instead of `ObservableObject`
- Implement proper error handling with `Result` types
- Use `@MainActor` for UI updates
- Leverage `NavigationStack` and `NavigationSplitView` for modern navigation

**Performance Considerations**:
- Use lazy loading for large lists
- Implement proper memory management
- Use `@MainActor` for UI updates
- Leverage SwiftUI's declarative nature for optimal performance


## 3. Architecture & Code Structure
- **Protocol-Oriented Programming (POP)**: Design components around protocols to promote flexibility and testability.
- **Dependency Injection**: Inject dependencies through initializers. Avoid singletons and global state.
- **Readability**: Prioritize code clarity and readability over premature optimization or overly clever solutions. Write code for humans first.
- **Documentation**: Add `///` doc comments for all public APIs (types, methods, properties).

## 4. Code Formatting
- Adhere to a consistent line length, typically 100-120 characters.
- Use SwiftFormat or a similar tool's standard configuration for consistent formatting.
