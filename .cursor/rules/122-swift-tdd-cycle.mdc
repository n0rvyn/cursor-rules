---
description: USE WHEN developing with a Test-Driven Development (TDD) approach. Guides the AI through the Red-Green-Refactor cycle using XCTest.
globs:
  - "**/*.swift"
  - "**/*.swiftui"
  - "**/*.xib"
  - "**/*.storyboard"
  - "**/*.xcassets"
  - "**/*.xcconfig"
alwaysApply: false
---

# AI-Assisted Test-Driven Development (TDD) Cycle for Swift/XCTest

You will now follow a strict Test-Driven Development cycle. You must execute each step in sequence and report the outcome to the user. You have access to the terminal to run tests.

## Step 1: RED - Write a Failing Test

-   Based on the user's requirement, identify the correct test target (e.g., `ProjectNameTests`).
-   Create a new, single `XCTest` function that asserts the desired behavior.
-   This test MUST fail initially because the corresponding implementation code does not yet exist.
-   Inform the user: "I have written the following failing test in `[FileName.swift]`."

## Step 2: VERIFY RED - Confirm Test Failure

-   Execute the test suite using the terminal. The command should be similar to: `xcodebuild test -scheme YourAppScheme -destination 'platform=iOS Simulator,name=iPhone 15' | xcbeautify`
-   Analyze the output. Confirm that the newly added test fails and all pre-existing tests pass.
-   Report to the user: "Test run confirmed. The new test `[testFunctionName]` failed as expected. All other tests passed."

## Step 3: GREEN - Write Code to Pass the Test

-   Write the **minimum amount of production code** necessary to make the failing test pass.
-   Do not add any extra functionality beyond what is required by the test.
-   Inform the user: "I have added the minimal implementation code in `[FileName.swift]` to pass the test."

## Step 4: VERIFY GREEN - Confirm Test Success

-   Execute the test suite again using the same terminal command.
-   Analyze the output and confirm that ALL tests now pass.
-   Report to the user: "Test run confirmed. All tests, including the new one, are now passing."

## Step 5: REFACTOR - Inquire About Refactoring

-   Present the newly added production code and test code to the user.
-   Ask the user: "**The TDD cycle is complete. Would you like me to refactor the new code for improved clarity, structure, or performance?**"
-   Await user instructions before performing any refactoring.

## Modern Swift Testing Best Practices

**Test Structure**:
- Use descriptive test method names: `test_whenUserTapsRunDetail_shouldNavigateToDetailView()`
- Group related tests using `XCTestCase` subclasses
- Use `setUp()` and `tearDown()` for test preparation and cleanup

**Assertions**:
- Use specific assertions: `XCTAssertEqual`, `XCTAssertTrue`, `XCTAssertNotNil`
- Avoid generic `XCTAssert` when more specific assertions are available
- Use `XCTAssertThrowsError` for testing error conditions

**Mocking and Dependencies**:
- Use protocols for dependency injection to enable testing
- Create mock objects for external dependencies
- Use `@MainActor` for UI-related tests

**SwiftUI Testing**:
- Test view models independently of SwiftUI views
- Use `@MainActor` for UI-related test methods
- Test navigation and state changes through view models

**Performance Testing**:
- Use `XCTestCase.measure` for performance-critical code
- Set appropriate performance baselines
- Test memory usage and leaks


-   Execute the test suite again using the same terminal command.
-   Analyze the output and confirm that ALL tests now pass.
-   Report to the user: "Test run confirmed. All tests, including the new one, are now passing."

## Step 5: REFACTOR - Inquire About Refactoring

-   Present the newly added production code and test code to the user.
-   Ask the user: "**The TDD cycle is complete. Would you like me to refactor the new code for improved clarity, structure, or performance?**"
-   Await user instructions before performing any refactoring.
